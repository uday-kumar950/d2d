// This is a manifest file that'll be compiled into application.js, which will include all the files
// listed below.
//
// Any JavaScript/Coffee file within this directory, lib/assets/javascripts, or any plugin's
// vendor/assets/javascripts directory can be referenced here using a relative path.
//
// It's not advisable to add code directly here, but if you do, it'll appear at the bottom of the
// compiled file. JavaScript code in this file should be added after the last require_* statement.
//
// Read Sprockets README (https://github.com/rails/sprockets#sprockets-directives) for details
// about supported directives.
//
//= require rails-ujs
//= require turbolinks
//= require jquery
//= require bootstrap-sprockets
//= require leaflet/leaflet.js
//= require leaflet/markercluster-src.js
//= require leaflet/realworld.js
//= require underscore
//= require_tree .


function live_vehicle_tracking(vehicle_id){
			
		if (interval != null){clearInterval(interval)}	
		$.ajax({
          url: '/live_track/get_vehicle_feeds/'+vehicle_id+'',
          dataType: 'JSON',
          type: 'GET',
          success: function(data) {
          	markers.clearLayers();
			vehicle_markers.clearLayers();
			prev_lat_long = null
          	 $.each(data, function (i, origin_dest) {
          	 	var origin = [origin_dest[0],origin_dest[1]]
          	 	create_red_dot(origin)          	 	
          	 	prev_lat_long = origin
          	 })
          	 if (prev_lat_long != null){
          	 	if (bus_marker != null){map.removeLayer(bus_marker)}
				 var busIcon = L.icon({
					iconUrl: "<%=asset_path('bus.png') %>"
				 })
	          	 bus_marker = L.marker(prev_lat_long, {icon: busIcon})//.addTo(map)
	          	 add_vehicle_markers(bus_marker)
	          	 map.setView(prev_lat_long, 13)
	          	 map.fitBounds(vehicle_markers.getBounds());
          	 }
            
          },
			error: function() {
			 	console.log("error");
			},
			complete: function (data) {
				getDataWithInterval(3000,vehicle_id)    
			}
        });
	}

	function create_red_dot(lat_long){
		if (prev_lat_long != null && prev_lat_long[0] != lat_long[0] && prev_lat_long[1] != lat_long[1]) {
			var red_dot = L.icon({
				iconUrl: "<%=asset_path('dot-red.png') %>"
			})
			var red_dot_marker = L.marker(lat_long, {icon: red_dot})//.addTo(map)//.bindPopup(""+details["timestamp"]+"<br>"+ details['speed'] +" km/h")
			add_vehicle_markers(red_dot_marker)
			create_poly_lines(lat_long,prev_lat_long)
		}
	}

	function create_poly_lines(lat_long,prev_lat_long){
		if (prev_lat_long != null && prev_lat_long != lat_long){
			var polyline = L.polyline([lat_long,prev_lat_long])//.addTo(map);
			add_vehicle_markers(polyline)
		}
	}

	function update_marker(vehicle_id){
		var busIcon = L.icon({
			iconUrl: "<%=asset_path('bus.png') %>"
		}) 
		$.ajax({
          url: '/live_track/get_current_location/'+vehicle_id+'',
          dataType: 'JSON',
          type: 'GET',
          async: true,
          success: function(data) {  
	          	var origin = [data[0],data[1]]
          		if (data.length != 0 && prev_lat_long != null && (prev_lat_long[0] != data[0] || prev_lat_long[1] != data[1]))  {   	 
	          	 	create_red_dot(origin)
	          	 	create_poly_lines(origin,prev_lat_long)
	          	 	if (bus_marker != null){
	          	 		vehicle_markers.removeLayer(bus_marker)
	          	 		map.removeLayer(bus_marker)
	          	 	}	          	 	
					if(prev_lat_long != null){
						bus_marker =  L.Marker.movingMarker([prev_lat_long,origin],[3000],{icon: busIcon})//.addTo(map);
						bus_marker.start()
					}
					else
					{
						bus_marker = L.marker(origin, {icon: busIcon})//.addTo(map)  
					}
					add_vehicle_markers(bus_marker)
	          	 	prev_lat_long = origin
	          	 	map.setView(origin, 13)
	          	 	map.fitBounds(vehicle_markers.getBounds());
	          	} 
          },
			error: function() {
			 	console.log("error");
			},
			complete: function (data) {
      			//getDataWithInterval(3000,vehicle_id)    
   			}
        });
	}

	function getDataWithInterval(time_limit,vehicle_id){
		interval = setInterval(function () {
			update_marker(vehicle_id);
		},3000);
	}

	function add_vehicle_markers(marker){
		vehicle_markers.addLayer(marker)
		map.addLayer(vehicle_markers);
		//marker.addTo(map)
	}